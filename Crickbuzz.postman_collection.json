{
	"info": {
		"_postman_id": "1d887575-5451-44cc-82cc-964b18a1ffcf",
		"name": "Crickbuzz",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30384444"
	},
	"item": [
		{
			"name": "Match",
			"item": [
				{
					"name": "Get all matches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/matches/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"matches",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Add match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"team1\": \"South Africa\",\n    \"team2\": \"New Zealand\",\n    \"venue\": \"Newlands Cricket Ground\",\n    \"date\": \"2024-07-10\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/matches/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"matches",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/matches/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"matches",
								""
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Update match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/matches/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"matches",
								""
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get match by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/matches/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"matches",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Player",
			"item": [
				{
					"name": "Get all players",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/players/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"players",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Add player",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "// {\n//     \"name\": \"Joe Root\",\n//     \"matchesPlayed\": 162,\n//     \"runs\": 8786,\n//     \"average\": 49.24,\n//     \"strikeRate\": 86.94\n//   },\n//   {\n//     \"name\": \"Ben Stokes\",\n//     \"matchesPlayed\": 67,\n//     \"runs\": 2693,\n//     \"average\": 35.09,\n//     \"strikeRate\": 92.57\n//   },\n//   {\n//     \"name\": \"Babar Azam\",\n//     \"matchesPlayed\": 90,\n//     \"runs\": 4235,\n//     \"average\": 56.95,\n//     \"strikeRate\": 86.94\n//   },\n//   {\n//     \"name\": \"Shaheen Afridi\",\n//     \"matchesPlayed\": 30,\n//     \"wickets\": 65,\n//     \"average\": 23.86,\n//     \"economy\": 4.91\n//   },\n//   {\n//     \"name\": \"Quinton de Kock\",\n//     \"matchesPlayed\": 121,\n//     \"runs\": 5238,\n//     \"average\": 45.66,\n//     \"strikeRate\": 90.63\n//   },\n  {\n    \"name\": \"Kagiso Rabada\",\n    \"matchesPlayed\": 46,\n    \"wickets\": 213,\n    \"average\": 23.56,\n    \"economy\": 4.99\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/players/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"players",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get player stats by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/players/1/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"players",
								"1",
								"stats"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Team",
			"item": [
				{
					"name": "Add player to team",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Kagiso Rabada\",\n    \"role\": \"Bowler\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teams/5/squad",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teams",
								"5",
								"squad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get players in the team",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Virat Kohli\",\n    \"role\":\"Skipper\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teams/1/squad",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teams",
								"1",
								"squad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new team",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"India\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/teams/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"teams",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "var",
			"value": "matches",
			"type": "string"
		}
	]
}